#!/usr/bin/expect
#
# Called from speedtestLogger.sh. 
#
# Parses output from Linux commands dig, ping, wget, and iperf and uploads it to database table.
#
# This script lives here: https://github.com/pla1/utils/blob/master/speedtestLogger.sh
#
# speedtest-cli lives here: https://github.com/sivel/speedtest-cli
#
# Requires expect. sudo apt-get install expect
#
proc randomString len {
 set s "abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ23456789"
 for {set i 0} {$i <= $len} {incr i} {
    append p [string index $s [expr {int([string length $s]*rand())}]]
 }
 return $p
}

set server "64.20.30.58"
set token [lindex $argv 0]
set outputFile [open /tmp/speedtestLoggerOutput.sh w]
set hostname [exec /bin/hostname]
#exp_internal 1
set timeout 30

set hostedBy ""
set distance 0
set distanceUOM 0
set latency 0
set latencyUOM 0
set download 0
set downloadUOM 0
set upload 0
set uploadUOM 0
set fromIpAddress ""
set iperfBandwidthUDP 0
set iperfJitterUDP 0
set iperfLostUDP 0
set iperfTotalUDP 0
set iperfBandwidthTCP 0
set dl10MBMinutes 0
set dl10MBSeconds 0
set dl100MBMinutes 0
set dl100MBSeconds 0
set dl1GBMinutes 0
set dl1GBSeconds 0
set pingPacketsTransmitted 0
set pingPacketsReceived 0
set pingPacketLoss 0
set pingMinimum 0
set pingAverage 0
set pingMaximum 0
set pingStandardDeviation 0
set pingTime 0
set digMinimum 0
set digMaximum 0
set digReceived 0
set digQueries 0
set digServers {64.20.26.17 64.20.26.145}
foreach digServer $digServers { 
  set quantity 10
  set counter 0
  while { $counter < $quantity } {
    set counter [expr $counter+1]
    set fakeDomainName [randomString 60].com
    puts "$fakeDomainName"
    set digQueries [expr $digQueries+1]
    spawn dig @$digServer +trace +tcp "$fakeDomainName"
    expect -re ".*Received \[0-9\]+ bytes from .* in (\[0-9\]+) ms.*" {
      set digQueryTime $expect_out(1,string)
      set digReceived [expr $digReceived+1] 
      puts "QUERY TIME: $digQueryTime for query number: $counter Server: $digServer name: $fakeDomainName"
      if { $digQueryTime > $digMaximum } {
        set digMaximum $digQueryTime
      } 
      if { $digQueryTime < $digMinimum || $digMinimum == 0 } {
        set digMinimum $digQueryTime
      }
    }
  }
  puts "Max: $digMaximum Min: $digMinimum Queries: $digQueries Received: $digReceived"
}




spawn ping -c 10 $server
expect -re ".*\r\n(\[0-9\]+) packets transmitted, (\[0-9\]+) received, (\[0-9\]+)% packet loss, time (\[0-9\]+)ms\r\n" {
	set pingPacketsTransmitted $expect_out(1,string)
	set pingPacketsReceived $expect_out(2,string)
	set pingPacketLoss $expect_out(3,string)
	set pingTime $expect_out(4,string)
}
puts "PING RESULTS: $pingPacketsTransmitted $pingPacketsReceived $pingPacketLoss $pingTime"

expect -re ".*rtt min/avg/max/mdev = (\[0-9\]+\.\[0-9\]+)/(\[0-9\]+\.\[0-9\]+)/(\[0-9\]+\.\[0-9\]+)/(\[0-9\]+\.\[0-9\]+) ms.*" {
	set pingMinimum $expect_out(1,string)
	set pingAverage $expect_out(2,string)
	set pingMaximum $expect_out(3,string)
	set pingStandardDeviation $expect_out(4,string)
}
puts "PING TOTALS: $pingMinimum $pingAverage $pingMaximum $pingStandardDeviation"

set timeout 600 

spawn wget --output-document /tmp/test.mpg http://$server/10MB.mpg
expect {
	-re "/s + in +(\[0-9\])m +(\[0-9\]*\.?\[0-9\]+)s" {
		set dl10MBMinutes $expect_out(1,string)
		set dl10MBSeconds $expect_out(2,string)
		set dl10MBSeconds [expr {$dl10MBSeconds + $dl10MBMinutes * 60}]
	}
	-re "/s + in +(\[0-9\]+\.?\[0-9\]+)s" {
		set dl10MBSeconds $expect_out(1,string)
	}
}
puts "10MB DL MINUTES: $dl10MBMinutes SECONDS: $dl10MBSeconds"


spawn wget --output-document /tmp/test.mpg http://$server/100MB.mpg
expect {
	-re "/s + in +(\[0-9\])m +(\[0-9\]*\.?\[0-9\]+)s" {
		set dl100MBMinutes $expect_out(1,string)
		set dl100MBSeconds $expect_out(2,string)
		set dl100MBSeconds [expr {$dl100MBSeconds + $dl100MBMinutes * 60}]
	}
	-re "/s + in +(\[0-9\]+\.?\[0-9\]+)s" {
		set dl100MBSeconds $expect_out(1,string)
	}
}
puts "100MB DL SECONDS: $dl100MBSeconds"
# todo change to 50 in the if below
if {$dl100MBSeconds < 50} {
	spawn wget --output-document /tmp/test.mpg http://$server/1GB.mpg
	expect {
		-re "/s + in +(\[0-9\])m +(\[0-9\]*\.?\[0-9\]+)s" {
		  	set dl1GBMinutes $expect_out(1,string)
		  	set dl1GBSeconds $expect_out(2,string)
			set dl1GBSeconds [expr {$dl1GBSeconds + $dl1GBMinutes * 60}]
		}
		-re "/s + in +(\[0-9\]+\.?\[0-9\]+)s" {
			set dl1GBSeconds $expect_out(1,string)
		}
	}
	puts "1GB DL SECONDS: $dl1GBSeconds"
}

spawn iperf --port 5002 --udp --format k -c $server 
expect -re ".*Server Report:.* (\[0-9\]+\.\[0-9\]+) Kbits/sec +(\[0-9\]+\.\[0-9\]+) ms +(\[0-9\]+)/ +(\[0-9\]+) " {
	set iperfBandwidthUDP $expect_out(1,string)
	set iperfJitterUDP $expect_out(2,string)
	set iperfLostUDP $expect_out(3,string)
	set iperfTotalUDP $expect_out(4,string)
}
puts "IPERF UDP BANDWIDTH $iperfBandwidthUDP JITTER: $iperfJitterUDP LOST: $iperfLostUDP TOTAL: $iperfTotalUDP"


spawn iperf --port 5001 --format k -c $server 
expect -re ".* (\[0-9\]+\.\[0-9\]+) Kbits/sec.*" {
	set iperfBandwidthTCP $expect_out(1,string)
}
puts "IPERF TCP BANDWIDTH $iperfBandwidthTCP"

puts $outputFile "curl --header Content-Type:application/json --header token:$token --request PUT --data '{\"distanceUOM\":\"$distanceUOM\",\"latencyUOM\":\"$latencyUOM\",\"downloadUOM\":\"$downloadUOM\",\"uploadUOM\":\"$uploadUOM\",\"hostedBy\":\"$hostedBy\",\"distance\":$distance,\"latency\":$latency,\"download\":$download,\"upload\":$upload,\"pingTransmitted\":$pingPacketsTransmitted,\"pingReceived\":$pingPacketsReceived,\"pingPacketLoss\":$pingPacketLoss,\"pingTime\":$pingTime,\"pingMinimum\":$pingMinimum,\"pingAverage\":$pingAverage,\"pingMaximum\":$pingMaximum,\"pingStandardDeviation\":$pingStandardDeviation,\"hostname\":$hostname,\"dl10MB\":$dl10MBSeconds,\"dl100MB\":$dl100MBSeconds,\"dl1GB\":$dl1GBSeconds,\"iperfBandwidthUDP\":$iperfBandwidthUDP,\"iperfTotalUDP\":$iperfTotalUDP,\"iperfLostUDP\":$iperfLostUDP,\"iperfJitterUDP\":$iperfJitterUDP,\"iperfBandwidthTCP\":$iperfBandwidthTCP,\"digMinimum\":$digMinimum,\"digMaximum\":$digMaximum,\"digQueries\":$digQueries,\"digReceived\":$digReceived}' https://e.hometelco.com/a/SpeedtestUpload"
close $outputFile
